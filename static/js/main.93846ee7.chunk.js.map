{"version":3,"sources":["Components/Navbar.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","id","className","href","title","Component","Home","App","props","state","data","$","ajax","url","dataType","cache","success","console","log","this","setState","bind","error","xhr","status","err","alert","getSiteData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sPAwBeA,G,6KAnBT,OACG,6BACG,yBAAKC,GAAG,YACL,uBAAGC,UAAU,aAAaC,KAAK,YAAYC,MAAM,mBAAjD,mBACA,uBAAGF,UAAU,aAAaC,KAAK,QAAQC,MAAM,mBAA7C,mBAEA,wBAAIH,GAAG,MAAMC,UAAU,OACpB,4BAAI,uBAAGA,UAAU,eAAeC,KAAK,SAAjC,SACJ,4BAAI,uBAAGD,UAAU,eAAeC,KAAK,YAAjC,YACJ,4BAAI,uBAAGD,UAAU,eAAeC,KAAK,UAAjC,iB,GAZDE,cCwBNC,E,uKArBT,OACG,6BACG,4BAAQL,GAAG,QACR,yBAAKC,UAAU,cACZ,yBAAKA,UAAU,eACZ,6CACA,2EACA,+BAIN,uBAAGA,UAAU,cACV,uBAAGA,UAAU,eAAeC,KAAK,YAAW,uBAAGD,UAAU,6B,GAfxDG,aC4CJE,E,kDAtCb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,KAAM,IAHQ,E,sDAShBC,IAAEC,KAAK,CACLC,IAAI,aACJC,SAAS,OACTC,OAAO,EACPC,QAAS,SAASN,GAChBO,QAAQC,IAAIR,GACZS,KAAKC,SAAS,CAACV,KAAMA,KACrBW,KAAKF,MACPG,MAAO,SAASC,EAAKC,EAAQC,GAC3BR,QAAQC,IAAIO,GACZC,MAAMD,Q,0CAMVN,KAAKQ,gB,+BAIL,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAlCUG,aCMEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLL,QAAQK,MAAMA,EAAMuB,a","file":"static/js/main.93846ee7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Navbar extends Component {\n   render() {\n\n      return (\n         <div>\n            <nav id=\"nav-wrap\">\n               <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">Show navigation</a>\n               <a className=\"mobile-btn\" href=\"#home\" title=\"Hide navigation\">Hide navigation</a>\n\n               <ul id=\"nav\" className=\"nav\">\n                  <li><a className=\"smoothscroll\" href=\"#home\">Home</a></li>\n                  <li><a className=\"smoothscroll\" href=\"#journal\">Journal</a></li>\n                  <li><a className=\"smoothscroll\" href=\"#about\">About</a></li>\n               </ul>\n\n            </nav>\n         </div>\n\n      );\n   }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\n\nclass Home extends Component {\n   render() {\n\n      return (\n         <div>\n            <header id=\"home\">\n               <div className=\"row banner\">\n                  <div className=\"banner-text\">\n                     <h1>Rishab Mathur</h1>\n                     <h3> Developer | Musician | Random Project Doer</h3> \n                     <hr />\n                  </div>\n               </div>\n\n               <p className=\"scrolldown\">\n                  <a className=\"smoothscroll\" href=\"#journal\"><i className=\"icon-down-circle\"></i></a>\n               </p>\n\n            </header>\n         </div>\n      );\n   }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Home from './Components/Home';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      data: {}\n    };\n  }\n\n  // grab site data from json\n  getData(){\n    $.ajax({\n      url:'/data.json',\n      dataType:'json',\n      cache: false,\n      success: function(data){\n        console.log(data);\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err){\n        console.log(err);\n        alert(err);\n      }\n    });\n  }\n\n  componentDidMount(){\n    this.getSiteData();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar/>\n        <Home/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}